#!/usr/bin/env perl
use Git::Crypt;
use Crypt::CBC;
use IO::All;
use JSON::XS;

#Command line gitcrypt utility. This tool should be used inside gitdir containing .gitcrypt config file

#read .gitcrypt config file

#usage:
#   $ gitcrypt
#   Avaliable commands:
#   gitcrypt init
#
#   configuration options:
#   gitcrypt set cipher Blowfish
#   gitcrypt set key    some key
#   gitcrypt set salt   some salt
#
#   managing files
#   gitcrypt list
#   gitcrypt add some/file
#   gitcrypt del some/file
#
#   gitcrypt encrypt
#
#   gitcrypt decrypt
#
#   $ gitcrypt status
#   cipher  Blowfish
#   key     some key
#   salt    some salt
#   Current files status: encrypted
#
#
#   $ gitcrypt list
#   list : dir/file1
#          dir/file2
#          file3
#          dir/sub/file4
#
#   $ gitcrypt add some/file
#   add  : some/file
#
#   $ gitcrypt del some/file
#   del  : some/file
#
#   $ gitcrypt encrypt
#   files encrypted
#
#   $ gitcrypt decrypt
#   files decrypted

my $config_file = '.gitcrypt';

my $config =
( -e $config_file )
    ? decode_json io($config_file)->slurp
    : { files => [] };

   if (!@ARGV)                  { show_commands(); }
elsif ( $ARGV[0] eq 'init' )    { init() } 
elsif ( $ARGV[0] eq 'set' )     { set() } 
elsif ( $ARGV[0] eq 'list' )    { list() }
elsif ( $ARGV[0] eq 'add' )     { add() }
elsif ( $ARGV[0] eq 'del' )     { del() } 
elsif ( $ARGV[0] eq 'encrypt' ) { encrypt() } 
elsif ( $ARGV[0] eq 'decrypt' ) { decrypt() } 
elsif ( $ARGV[0] eq 'status' )  { status() }
else  { print "Command not avaliable\n"; }

sub show_commands {
    print <<COMMANDS;
Avaliable commands:
    gitcrypt init

Configuration options:
    gitcrypt set cipher Blowfish
    gitcrypt set key    some key
    gitcrypt set salt   some salt

Managing files:
    gitcrypt list
    gitcrypt add some/file1 other/file
    gitcrypt del some/file1 file2

Encrypt files:
    gitcrypt encrypt

Decrypt files:
    gitcrypt decrypt
COMMANDS
}

sub status {
    print "Current files status: " . ( ( $config->{ status } ) ? $config->{ status } : 'decrypted' );
    print "\n\n";
    print "cipher   $config->{cipher}"  if exists $config->{cipher};
    print "\n";
    print "key      $config->{key}"     if exists $config->{key};
    print "\n";
    print "salt     $config->{salt}"    if exists $config->{salt};
    print "\n\n";
    list();
}

sub init {
    if ( ! -e $config_file ) {
        print "Initializing $config_file";
        print <<STEPS;
Now configure your cipher, key and salt:
    gitcrypt set cipher Blowfish
    gitcrypt set key    some key
    gitcrypt set salt   some salt

STEPS
        save_config();
    } else {
        print "You already initialized an $config_file\n";
    }
}

sub validate {
    return 1
        if      exists $config->{ cipher }
            and exists $config->{ salt }
            and exists $config->{ key }
            ;
    print <<HELP;
You must set the cipher, salt and key. 
Use gitcrypt status and see current configuration.
HELP
    return 0;
}

sub gitcrypt {
    Git::Crypt->new(
        files => $config->{ files },
        cipher => Crypt::CBC->new(
            -key      => $config->{ key },
            -cipher   => $config->{ cipher },
            -salt     => pack( "H16", $config->{ salt } )
        )
    );
}

sub encrypt {
    return if ! validate();
    if ( !$config->{status} || $config->{status} eq 'decrypted' ) {
        #encrypt and then
        print "Encrypted.";
        $config->{status} = 'encrypted';
        save_config();
        gitcrypt()->encrypt;
    } else {
        print "Your files are already encrypted";
    }
}

sub decrypt {
    return if ! validate();
    if ( $config->{status} && $config->{status} eq 'encrypted' ) {
        #decrypt and then
        print "Decrypted.";
        $config->{status} = 'decrypted';
        save_config();
        gitcrypt()->decrypt;
    } else {
        print "Your files are already decrypted";
    }
}

sub del {
    if ( ! $ARGV[1] ) {
        print <<HELP;
You must supply one or more files to be deleted. 
ie: gitcrypt del file1 dir/file2
HELP
    } else {
        shift @ARGV;
        print "Deleting files:";
        map {
            my $file_to_del = $_;
            print $file_to_del, "\n";
            my $i = 0;
            for ( @{ $config->{ files } } ) {
                if ( $_ eq $file_to_del ) {
                    splice @{ $config->{ files } }, $i, 1;
                    last;
                }
                $i++;
            }
        } @ARGV;
        save_config();
    }
}

sub add {
    if ( ! $ARGV[1] ) {
        print <<HELP;
You must supply one or more files to be added. 
ie: gitcrypt add file1 dir/file2\n"; 
HELP
    } else {
        shift @ARGV;
        print "Adding files: \n";
        map {
            print $_, "\n";
            my $file = $_;
            push @{ $config->{files} }, $file
                if ! grep /^$file$/, @{ $config->{ files } };
        } @ARGV;
        save_config();
    }
}

sub list {
    #print files from $config
    if ( ! $config->{ files } || scalar @{ $config->{ files } } == 0 ) {
        print "No files added\n";
        return;
    }
    print "Files added:\n";
    for ( @{ $config->{ files } } ) {
        print $_ , "\n";
    }
}

sub set {
    if ( $ARGV[1] eq 'cipher' ) {
        set_cipher();
    } elsif ( $ARGV[1] eq 'key' ) {
        set_key();
    } elsif ( $ARGV[1] eq 'salt' ) {
        set_salt();
    } else {
        print "incorrect option $ARGV[1]\n";
    }
}

sub set_cipher {
    #set cipher
    if ( ! $ARGV[2] ) { 
        print "You must set a cipher. ie: Blowfish \n";
        return;
    }
    shift @ARGV;    #set
    shift @ARGV;    #cipher
    $config->{cipher} = join " ", @ARGV;
    print "Set cipher to: $config->{cipher}","\n";
    save_config();
}

sub set_key {
    #set key
    if ( ! $ARGV[2] ) {
        print "You did not pass a key\n";
        return
    }
    shift @ARGV;    #set
    shift @ARGV;    #key
    $config->{key} = join " ", @ARGV;
    print "Set key to: $config->{key}","\n";
    save_config();
}

sub set_salt {
    #set salt
    if ( ! $ARGV[2] ) {
        print "You did not pass a salt\n";
        return
    }
    shift @ARGV;    #set
    shift @ARGV;    #salt
    $config->{salt} = join " ", @ARGV;
    print "Set salt to: $config->{salt}","\n";
    save_config();
}

sub save_config {
    io( $config_file )->print( encode_json $config );
}


